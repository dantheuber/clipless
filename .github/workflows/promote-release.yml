name: Promote Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to promote to release (e.g., v1.0.1)'
        required: true
        type: string
      release_notes:
        description: 'Release notes (markdown supported)'
        required: false
        type: string
        default: |
          ## What's New
          
          - Feature updates and improvements
          - Bug fixes
          
          ## Download
          
          Choose the appropriate download for your operating system:
          - **Windows**: `clipless-{version}-setup.exe`
          - **macOS**: `clipless-{version}.dmg` 
          - **Linux**: `clipless-{version}.AppImage` or install via Snap Store
      prerelease:
        description: 'Mark as pre-release?'
        required: false
        type: boolean
        default: false

jobs:
  promote-release:
    runs-on: ubuntu-latest
    
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Validate tag exists
        run: |
          TAG="${{ github.event.inputs.tag }}"
          
          # Validate tag format
          if [[ ! $TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Error: Tag must be in format vX.Y.Z (e.g., v1.0.1)"
            exit 1
          fi
          
          # Check if tag exists
          if ! git ls-remote --tags origin | grep -q "refs/tags/$TAG$"; then
            echo "❌ Error: Tag $TAG does not exist in the repository"
            echo "Available tags:"
            git ls-remote --tags origin | sed 's/.*refs\/tags\//  /'
            exit 1
          fi
          
          echo "✅ Tag $TAG exists and is valid"

      - name: Get release ID
        id: get_release
        run: |
          TAG="${{ github.event.inputs.tag }}"
          
          # Get all releases (including drafts) and find the one with matching tag
          RELEASE_DATA=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/releases")
          
          # Find release by tag name (works for both draft and published)
          RELEASE_ID=$(echo "$RELEASE_DATA" | jq -r ".[] | select(.tag_name == \"$TAG\") | .id")
          
          if [ -z "$RELEASE_ID" ] || [ "$RELEASE_ID" = "null" ]; then
            echo "❌ Error: No release found for tag $TAG"
            echo "Available releases:"
            echo "$RELEASE_DATA" | jq -r '.[] | "  Tag: \(.tag_name), Draft: \(.draft)"'
            echo "Make sure the tag has been built and a draft release was created."
            exit 1
          fi
          
          echo "✅ Found release ID: $RELEASE_ID"
          echo "release_id=$RELEASE_ID" >> $GITHUB_OUTPUT

      - name: Promote to published release
        run: |
          RELEASE_ID="${{ steps.get_release.outputs.release_id }}"
          TAG="${{ github.event.inputs.tag }}"
          PRERELEASE="${{ github.event.inputs.prerelease }}"
          
          # Prepare release notes
          RELEASE_NOTES="${{ github.event.inputs.release_notes }}"
          # Replace {version} placeholder with actual version using sed
          VERSION="${TAG#v}"  # Remove 'v' prefix
          RELEASE_NOTES=$(echo "$RELEASE_NOTES" | sed "s/{version}/$VERSION/g")
          
          # Update and publish the release
          curl -X PATCH \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID" \
            -d "{
              \"tag_name\": \"$TAG\",
              \"name\": \"Clipless $VERSION\",
              \"body\": $(echo "$RELEASE_NOTES" | jq -R -s .),
              \"draft\": false,
              \"prerelease\": $PRERELEASE
            }"
          
          echo "🎉 Release $TAG has been published!"
          echo "📦 Release URL: https://github.com/${{ github.repository }}/releases/tag/$TAG"
