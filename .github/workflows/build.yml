# This workflow handles PR validation and building releases from tags
name: CI/CD

on:
  pull_request:
    branches: [main, master]
  push:
    tags: ['v*']

jobs:
  # Job 1: Validate PRs (typecheck, lint, version bump check)
  validate-pr:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for version checking

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run typecheck
        run: npm run typecheck

      - name: Run linting
        run: npm run lint

      - name: Check version bump
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version in package.json: $CURRENT_VERSION"
          
          # Check if tag already exists
          if git tag -l | grep -q "^v$CURRENT_VERSION$"; then
            echo "❌ Error: Tag v$CURRENT_VERSION already exists!"
            echo "Please bump the version in package.json before merging."
            exit 1
          else
            echo "✅ Version v$CURRENT_VERSION is new and valid."
          fi

  # Job 2: Build and create draft release when tag is pushed
  build-and-release:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: windows
          - os: macos-latest
            platform: mac

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # Linux specific setup for AppImage and snap
      - name: Install Linux dependencies
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libnss3-dev libatk-bridge2.0-dev libdrm2 libxkbcommon0 libxcomposite1 libxdamage1 libxrandr2 libgbm1 libxss1 libasound2

      - name: Build/release Electron app
        uses: samuelmeuli/action-electron-builder@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          
          # Always create release for tags, but as draft
          release: true
          
          build_script_name: build
          max_attempts: 3
        env:
          # Skip macOS code signing and notarization for now
          CSC_IDENTITY_AUTO_DISCOVERY: false
          CSC_LINK: ""
          CSC_KEY_PASSWORD: ""
